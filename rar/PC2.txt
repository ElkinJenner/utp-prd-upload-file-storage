{--EJERCICIO 1. 
(2 pts) Generar una función que permita hallar el último elemento de la lista.
[7, 8, 9] → 9
--}
ultimoElemento :: [Int] -> Int
ultimoElemento [x] = x --Stoper
ultimoElemento (x:xs) = ultimoElemento xs
--Imprimir
main = print (ultimoElemento [7, 8, 9])


-- EJERCICIO 2.
-- (2 pts) Realizar la concatenación de 2 listas.
-- [2, 3] [4, 5] → [2, 3, 4, 5]

concatenaListas :: [Int] -> [Int] -> [Int]
concatenaListas [] ys = ys  -- Stoper
concatenaListas (x:xs) ys = x : concatenaListas xs ys
-- Imprimir el resultado
main = print (concatenaListas [2, 3] [4, 5])



-- EJERCICIO 3.
-- (4 pts) Realizar una función que permita obtener una lista sin los extremos.
-- [7, 8, 9] → [8]

sinExtremos :: [Int] -> Int
sinExtremos xs = head (tail (init xs))  

-- Imprimir
main = print (sinExtremos [7, 8, 9])


-- EJERCICIO 4.
-- (5 pts) Definir una función que permita ingresar una lista de números reales y devolver
-- el doble más uno de cada real ingresado.

dobleMasUno :: [Float] -> [Float]
dobleMasUno = fmap (\x -> 2 * x + 1)

-- Imprimir
main = print (dobleMasUno [2.3, (-4.6), 4.1])


-- EJERCICIO 5.
-- (6 pts) Mediante uso de fmap se debe encontrar los números pares de una lista.

numerosPares :: [Int] -> [Int]
numerosPares xs = fmap id (filter (\x -> x `mod` 2 == 0) xs)

-- Imprimir [2, 3, 4, 5] → [2, 4]
main = print (numerosPares [2, 3, 4, 5])