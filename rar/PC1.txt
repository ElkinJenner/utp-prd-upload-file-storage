--Ejercicio 1
sumaCuadratica :: Int -> Int
sumaCuadratica 0 = 0
sumaCuadratica n = n^2 + sumaCuadratica (n-1)
main = print (sumaCuadratica 5)

--Ejercicio 2
sumaInversa :: Int -> Double
sumaInversa 0 = 0 --Stoper
sumaInversa n =(1/ fromIntegral(n^3)) + sumaInversa (n-1)
main = print (sumaInversa 5)

--Ejercicio 3
aparic :: Int -> Int -> Int
aparic digito 0 = 0
aparic digito numero = if ultimoDigito == digito then 1 + resto else resto where
    ultimoDigito = numero - (numero `div` 10) * 10
    resto = aparic digito (numero `div` 10)
main = print (aparic 3 321345)

--Ejercicio 4
longi:: Int -> Int
longi n = length (show n)
main = print (longi 321345)

--Ejercicio 5
{-Definir una función recursiva
que permita encontrar el número de combinaciones
COMB (6, 2) = (62) 6!/2! (6-2)!
-}
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial (n - 1)

-- Función para calcular combinaciones

combinaciones :: Int -> Int -> Int
combinaciones n k = factorial n `div` (factorial k * factorial (n - k))

main = print (combinaciones 6 2)